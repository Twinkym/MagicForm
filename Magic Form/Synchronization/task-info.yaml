type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    import path from 'path';

    const pagePath = path.join(import.meta.url, '../../src/index.html');
    import {StageTest, correct, wrong, WrongAnswer} from 'hs-test-web';

    class Test extends StageTest {

        page = this.getPage(pagePath)
        secondPage = this.getPage(pagePath)

        tests = [
            this.node.execute(async () => {
                this.firstNameInput = await this.page.findBySelector("input[name='first-name']");
                if (this.firstNameInput == null) {
                    return wrong("Can't find input tag with name 'first-name'!")
                }

                this.lastNameInput = await this.page.findBySelector("input[name='last-name']");
                if (this.lastNameInput == null) {
                    return wrong("Can't find input tag with name 'last-name'!")
                }

                this.email = await this.page.findBySelector("input[name='email']");
                if (this.email == null) {
                    return wrong("Can't find input tag with name 'email'!")
                }

                this.phone = await this.page.findBySelector("input[name='phone']");
                if (this.phone == null) {
                    return wrong("Can't find input tag with name 'phone'!")
                }

                this.company = await this.page.findBySelector("input[name='company']");
                if (this.company == null) {
                    return wrong("Can't find input tag with name 'company'!")
                }

                this.address = await this.page.findBySelector("input[name='address']");
                if (this.address == null) {
                    return wrong("Can't find input tag with name 'address'!")
                }

                return correct()
            }),
            this.node.execute(async () => {
                this.navbar = await this.page.findBySelector("nav");
                if (this.navbar == null) {
                    return wrong("Can't find <nav> element!");
                }

                this.submitFormNavButton = await this.navbar.findBySelector("a#form-link");
                if (this.submitFormNavButton == null) {
                    return wrong("Can't find <a> tag with '#form-link' id inside of the <nav> tag!")
                }

                this.historyNavButton = await this.navbar.findBySelector("a#history-link");
                if (this.historyNavButton == null) {
                    return wrong("Can't find <a> tag with '#history-link' id inside of the <nav> tag!")
                }

                return correct();
            }),
            this.node.execute(async () => {

                const values = [
                    await this.firstNameInput.getProperty('value'),
                    await this.lastNameInput.getProperty('value'),
                    await this.email.getProperty('value'),
                    await this.phone.getProperty('value'),
                    await this.company.getProperty('value'),
                    await this.address.getProperty('value'),
                ]

                values.forEach(value => {
                    if (value !== '') {
                        throw new WrongAnswer("All input fields should be empty at the beginning!")
                    }
                })

                return correct()
            }),
            this.node.execute(async () => {
                const testFirstName = 'Monica'
                await this.firstNameInput.inputText(testFirstName)
                await this.page.refresh()

                let firstNameValue = await this.firstNameInput.getProperty('value')
                if (firstNameValue !== testFirstName) {
                    return wrong("After reloading the page, input field with name 'first-name' has wrong value!\n" +
                        "Expected: '" + testFirstName + "'\n" +
                        "Found: '" + firstNameValue + "'")
                }

                const testLastName = 'Meyers'
                await this.lastNameInput.inputText(testLastName)
                await this.page.refresh()

                let lastNameValue = await this.lastNameInput.getProperty('value')
                if (lastNameValue !== testLastName) {
                    return wrong("After reloading the page, input field with name 'last-name' has wrong value!\n" +
                        "Expected: '" + testLastName + "'\n" +
                        "Found: '" + lastNameValue + "'")
                }

                const testEmail = 'test@gmail.com'
                await this.email.inputText(testEmail)
                await this.page.refresh()

                let emailValue = await this.email.getProperty('value')
                if (emailValue !== testEmail) {
                    return wrong("After reloading the page, input field with name 'email' has wrong value!\n" +
                        "Expected: '" + testEmail + "'\n" +
                        "Found: '" + emailValue + "'")
                }

                const testPhone = '12345678'
                await this.phone.inputText(testPhone)
                await this.page.refresh()

                let phoneValue = await this.phone.getProperty('value')
                if (phoneValue !== testPhone) {
                    return wrong("After reloading the page, input field with name 'phone' has wrong value!\n" +
                        "Expected: " + testPhone + "'\n" +
                        "Found: '" + phoneValue + "'")
                }

                const testCompany = 'Hyperskill'
                await this.company.inputText(testCompany)
                await this.page.refresh()

                let companyValue = await this.company.getProperty('value')
                if (companyValue !== testCompany) {
                    return wrong("After reloading the page, input field with name 'company' has wrong value!\n" +
                        "Expected: " + testCompany + "'\n" +
                        "Found: '" + companyValue + "'")
                }

                const testAddress = '4733 Reppert Coal Road, Southfield, Michigan'
                await this.address.inputText(testAddress)
                await this.page.refresh()

                let addressValue = await this.address.getProperty('value')
                if (addressValue !== testAddress) {
                    return wrong("After reloading the page, input field with name 'address' has wrong value!\n" +
                        "Expected: " + testAddress + "'\n" +
                        "Found: '" + addressValue + "'")
                }

                // test a couple of the previous fields
                firstNameValue = await this.firstNameInput.getProperty('value')
                if (firstNameValue !== 'Monica') {
                    return wrong("After reloading the page, input field with name 'first-name' has wrong value!\n" +
                        "Expected: 'Monica'\n" +
                        "Found: '" + firstNameValue + "'")
                }

                phoneValue = await this.phone.getProperty('value')
                if (phoneValue !== testPhone) {
                    return wrong("After reloading the page, input field with name 'phone' has wrong value!\n" +
                        "Expected: " + testPhone + "'\n" +
                        "Found: '" + phoneValue + "'")
                }

                return correct();
            }),
            this.node.execute(async () => {
                const submitButton = await this.page.findById("submit-button");
                if (submitButton == null) {
                    return wrong("Can't find a button with 'submit-button' id!")
                }

                await submitButton.clickForNavigation({timeout: 1500}).catch(ignored => {
                })

                const values = [
                    await this.firstNameInput.getProperty('value'),
                    await this.lastNameInput.getProperty('value'),
                    await this.email.getProperty('value'),
                    await this.phone.getProperty('value'),
                    await this.company.getProperty('value'),
                    await this.address.getProperty('value'),
                ]

                values.forEach(value => {
                    if (value !== '') {
                        throw new WrongAnswer("All input fields should be empty after submitting the form " +
                            "by clicking on button with 'submit-button' id!")
                    }
                })

                return correct()
            }),
            this.node.execute(async () => {
                this.historyLinkButton = await this.page.findById('history-link')
                this.submitFormLinkButton = await this.page.findById('form-link')

                await this.historyLinkButton.clickForNavigation({timeout: 1500}).catch(err => {
                    throw new WrongAnswer("After clicking on history link with 'history link' id " +
                        "the app should navigate to another page!")
                })

                return correct()
            }),
            this.node.execute(async () => {
                const history = await this.page.findAllByClassName("submit-history-card")
                if (history.length !== 1) {
                    return wrong("On the history page expected 1 div block with 'submit-history-card' class" +
                        " after submitting the form!")
                }

                const card = history[0];

                const firstNameField = await card.findByClassName('card-first-name');
                if (firstNameField == null) {
                    return wrong("Can't find element with 'card-first-name' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const firstNameTextContent = await firstNameField.textContent();
                if (firstNameTextContent !== 'Monica') {
                    return wrong("Element with 'card-first-name' class has wrong text content!\n" +
                        "Expected: Monica\n" +
                        "Found: " + firstNameTextContent)
                }

                const lastNameField = await card.findByClassName('card-last-name');
                if (lastNameField == null) {
                    return wrong("Can't find element with 'card-last-name' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const lastNameTextContent = await lastNameField.textContent();
                if (lastNameTextContent !== 'Meyers') {
                    return wrong("Element with 'card-last-name' class has wrong text content!\n" +
                        "Expected: Meyers\n" +
                        "Found: " + lastNameTextContent)
                }

                const emailField = await card.findByClassName('card-email');
                if (emailField == null) {
                    return wrong("Can't find element with 'card-email' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const emailTextContent = await emailField.textContent();
                if (emailTextContent !== 'test@gmail.com') {
                    return wrong("Element with 'card-email' class has wrong text content!\n" +
                        "Expected: test@gmail.com\n" +
                        "Found: " + emailTextContent)
                }

                const phoneField = await card.findByClassName('card-phone');
                if (phoneField == null) {
                    return wrong("Can't find element with 'card-phone' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const phoneTextContent = await phoneField.textContent();
                if (phoneTextContent !== '12345678') {
                    return wrong("Element with 'card-phone' class has wrong text content!\n" +
                        "Expected: 12345678\n" +
                        "Found: " + phoneTextContent)
                }

                const companyField = await card.findByClassName('card-company');
                if (companyField == null) {
                    return wrong("Can't find element with 'card-company' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const companyTextContent = await companyField.textContent();
                if (companyTextContent !== 'Hyperskill') {
                    return wrong("Element with 'card-company' class has wrong text content!\n" +
                        "Expected: Hyperskill\n" +
                        "Found: " + companyTextContent)
                }

                const addressField = await card.findByClassName('card-address');
                if (addressField == null) {
                    return wrong("Can't find element with 'card-address' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const addressTextContent = await addressField.textContent();
                if (addressTextContent !== '4733 Reppert Coal Road, Southfield, Michigan') {
                    return wrong("Element with 'card-address' class has wrong text content!\n" +
                        "Expected: 4733 Reppert Coal Road, Southfield, Michigan\n" +
                        "Found: " + addressTextContent)
                }

                return correct()
            }),
            this.node.execute(async () => {

                await this.submitFormLinkButton.clickForNavigation({timeout: 1500}).catch(err => {
                    throw new WrongAnswer("After clicking on the Form link button with 'form-link' id " +
                        "you should navigate to another page!")
                })

                await this.firstNameInput.inputText('First name');
                await this.lastNameInput.inputText('Last name');
                await this.email.inputText('Email');
                await this.phone.inputText('Phone');
                await this.company.inputText('Company');
                await this.address.inputText('Address');

                const submitButton = await this.page.findById("submit-button");
                await submitButton.clickForNavigation({timeout: 1500}).catch(ignored => {
                })

                return correct()
            }),
            this.node.execute(async () => {

                await this.historyLinkButton.clickForNavigation({timeout: 1500}).catch(err => {
                    throw new WrongAnswer("After clicking on history link with 'history link' id" +
                        "the app should navigate to another page!")
                })

                const history = await this.page.findAllByClassName("submit-history-card")
                if (history.length !== 2) {
                    return wrong("On the history page expected 2 div block with 'submit-history-card' class" +
                        " after submitting the form!")
                }

                return correct();
            }),
            this.node.execute(async () => {
                let history = await this.page.findAllByClassName("submit-history-card")

                const firstCard = history[0]

                const deleteButton = await firstCard.findBySelector('button.delete-button');

                if (deleteButton == null) {
                    return wrong("Each submit history card should contain a button with 'delete-button' class")
                }

                await deleteButton.clickForNavigation({timeout: 500}).catch(() => {})

                history = await this.page.findAllByClassName("submit-history-card")
                if (history.length !== 1) {
                    return wrong("After clicking on delete button the card element should be removed from the DOM!")
                }

                await this.submitFormLinkButton.clickForNavigation({timeout: 1500}).catch(err => {
                    throw new WrongAnswer("After clicking on the Form link button with 'form-link' id " +
                        "you should navigate to another page!")
                })

                return correct()
            }),
            this.node.execute(async () => {
                await this.secondPage.open();

                const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms))

                const firstPageFirstNameField = await this.page.findBySelector("input[name='first-name']");
                const firstPagePhoneField = await this.page.findBySelector("input[name='phone']");
                const firstPageAddressField = await this.page.findBySelector("input[name='address']");

                const secondPageFirstNameField = await this.secondPage.findBySelector("input[name='first-name']");
                const secondPagePhoneField = await this.secondPage.findBySelector("input[name='phone']");
                const secondPageAddressField = await this.secondPage.findBySelector("input[name='address']");

                await firstPageFirstNameField.inputText('Test first name');
                await sleep(300)
                const secondPageFirstNameValue = await secondPageFirstNameField.getProperty('value');
                if (secondPageFirstNameValue !== 'Test first name') {
                    return wrong("Looks like input fields values doesn't sync within different tabs!")
                }

                await secondPageAddressField.inputText('Test address');
                await sleep(300)
                const firstPageAddressValue = await firstPageAddressField.getProperty('value');
                if (firstPageAddressValue !== 'Test address') {
                    return wrong("Looks like input fields values doesn't sync within different tabs!")
                }

                await firstPagePhoneField.inputText('Test phone');
                await sleep(300)
                const secondPagePhoneValue = await secondPagePhoneField.getProperty('value');
                if (secondPagePhoneValue !== 'Test phone') {
                    return wrong("Looks like input fields values doesn't sync within different tabs!")
                }

                return correct()
            })
        ]
    }

    it("Test stage", async () => {
            await new Test().runTests()
        }
    ).timeout(30000);
  learner_created: false
- name: src/CSS/history.css
  visible: true
  text: |-
    *{box-sizing: border-box;}
    html, body{margin: 0; padding: 0;}
    nav{text-align: center; padding: 1rem; width: 100%; background: black; margin: auto;}
    a{text-decoration: none; color: white; margin-left: 50px;}
    form{
        text-align: left;
        display: block;
        padding: 2rem;
        width: fit-content;
        margin: auto;
        position: relative;
    }
    label{font-weight: bold;}

    button:hover{
        background: blue;
        color: white;
    }
    .submit-history-card{
        align-self: center;
        text-align: center;
        margin: auto;
        background-color: aliceblue;
        width: fit-content;
        border-radius: .5rem;
        border: black;
        border-style: dot-dash;
    }
    .delete-button{
        margin-bottom: 1rem;
        align-self: center;
        background-color: red;
    }
    [class^="card-"]{
        color: blue;
    }
    footer{
        text-align: center;
    }
  learner_created: true
- name: src/CSS/index.css
  visible: true
  text: |-
    *{box-sizing: border-box;}
    html, body{margin: 0; padding: 0;}
    nav{text-align: center; padding: 1rem; width: 100%; background: black; margin: auto;}
    a{text-decoration: none; color: white; margin-left: 50px;}
    form{
        text-align: left;
        display: block;
        padding: 2rem;
        width: fit-content;
        margin: auto;
        position: relative;
    }
    label{font-weight: bold;}
    button{
        text-align: center;
        background: #20B2AAFF;
        margin-top: 1.2rem;
        margin-left: 50px;
        color: #FFFFFFFF;
        padding: .5rem .5rem;
        border-radius: 35px;
        border: inset 2px cadetblue;
        font-size: small;
        cursor: pointer;
        transition: all .4s ease-in-out;
        opacity: 60%;
    }
    button:hover{
        background: blue;
        color: white;
    }
    footer{
        text-align: center;
    }
    .submit-history-card {
        align-self: center;
        text-align: center;
        margin-bottom: 2rem;
        background-color: white;
        width: 300px;
        border-radius: 5px;
        border: none;
        box-shadow: 0 0 5px gray;
    }
    .delete-button {
        margin-bottom: 1rem;
        align-self: center;
        background-color: red;
    }

    [class^="card-"] {
        color: blue;
    }
  learner_created: true
- name: src/JS/history.js
  visible: true
  text: |-
    let forms = JSON.parse(localStorage.getItem('forms'));

    if (forms !== null) {
        forms = JSON.parse(JSON.stringify(forms));
        forms.forEach(form => addCard(form));
    }

    function addCard(form) {
        const formContainer = document.createElement('div');
        formContainer.setAttribute('class', 'submit-history-card');
        Object.keys(form).forEach(field => {
            const fieldContainer = document.createElement('div');
            const fieldTag = document.createElement('label');
            fieldTag.innerText = field.split("-").map(e => e[0].toUpperCase() + e.substring(1)).join(" ");
            fieldContainer.appendChild(fieldTag);
            const fieldValue = document.createElement('p');
            fieldValue.classList.add('card-' + field);
            fieldValue.innerText = form[field] ? form[field] : 'N/A';
            fieldContainer.appendChild(fieldValue);
            formContainer.appendChild(fieldContainer);
        });
        const deleteButton = document.createElement('button');
        deleteButton.setAttribute('class', 'delete-button');
        deleteButton.innerText = 'Delete';
        formContainer.appendChild(deleteButton);

        document.body.appendChild(formContainer);
    }
  learner_created: true
- name: src/JS/script.js
  visible: true
  text: |-
    const inputFields = document.querySelectorAll('input');
    const submit_button = document.getElementById('submit-button');

    inputFields.forEach(inputField => {
        const value = localStorage.getItem(inputField.id);
        if (value !== null) {
            const element = document.getElementById(inputField.id);
            element.value = value;
        }
    });

    inputFields.forEach(inputField => {
        inputField.addEventListener('input', saveData)
    });

    function saveData(event) {
        const element = event.target;
        localStorage.setItem(element.id, element.value);
    }

    submit_button.addEventListener('click', () => {
        let forms = localStorage.getItem('forms');
        forms = forms ? JSON.parse(forms) : [];
        forms.push(getSubmittedForm());
        localStorage.setItem('forms', JSON.stringify(forms));
    });

    function getSubmittedForm() {
        const form = {
            'first-name': localStorage.getItem('first-name'),
            'last-name': localStorage.getItem('last-name'),
            email: localStorage.getItem('email'),
            phone: localStorage.getItem('phone'),
            company: localStorage.getItem('company'),
            address: localStorage.getItem('address')
        };
        inputFields.forEach(inputField => {
            inputField.value = '';
            localStorage.removeItem(inputField.id);
        });
        return form;
    }
  learner_created: true
- name: src/History.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="description" content="Author: David De La Puente Enriquez"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <title>History</title>
        <link href="CSS/history.css" rel="stylesheet">

    </head>
    <body>
    <nav>
        <a id="form-link" href="index.html">Form</a>
        <a id="history-link" href="#">History</a>
    </nav>
    <script src="JS/history.js"></script>
    </body>
    <footer>DCK &copy;2022</footer>
    </html>
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18643#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 24 Aug 2022 19:16:31 UTC
record: 4
